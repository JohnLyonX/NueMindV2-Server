<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nuex.edu.mapper.EduCoursesStudentMapper">
    
    <resultMap type="EduCoursesStudent" id="EduCoursesStudentResult">
        <result property="id"    column="id"    />
        <result property="coursesId"    column="courses_id"    />
        <result property="courseName"    column="course_name"    />
    </resultMap>

    <resultMap id="EduCoursesStudentEduCoursesStudentDetailsResult" type="EduCoursesStudent" extends="EduCoursesStudentResult">
        <collection property="eduCoursesStudentDetailsList" ofType="EduCoursesStudentDetails" column="id" select="selectEduCoursesStudentDetailsList" />
    </resultMap>

    <resultMap type="EduCoursesStudentDetails" id="EduCoursesStudentDetailsResult">
        <result property="id"    column="id"    />
        <result property="coursesStudentId"    column="courses_student_id"    />
        <result property="studentId"    column="student_id"    />
        <result property="studentName"    column="student_name"    />
        <result property="studentPhoneNumber"    column="student_phone_number"    />
        <result property="studentSex"    column="student_sex"    />
        <result property="studentStatus"    column="student_status"    />
    </resultMap>

    <sql id="selectEduCoursesStudentVo">
        select id, courses_id, course_name from edu_courses_student
    </sql>

    <select id="selectEduCoursesStudentList" parameterType="EduCoursesStudent" resultMap="EduCoursesStudentResult">
        <include refid="selectEduCoursesStudentVo"/>
        <where>  
            <if test="coursesId != null "> and courses_id = #{coursesId}</if>
            <if test="courseName != null  and courseName != ''"> and course_name like concat('%', #{courseName}, '%')</if>
        </where>
    </select>
    
    <select id="selectEduCoursesStudentById" parameterType="Long" resultMap="EduCoursesStudentEduCoursesStudentDetailsResult">
        select id, courses_id, course_name
        from edu_courses_student
        where id = #{id}
    </select>

    <select id="selectEduCoursesStudentDetailsList" resultMap="EduCoursesStudentDetailsResult">
        select id, courses_student_id, student_id, student_name, student_phone_number, student_sex, student_status
        from edu_courses_student_details
        where courses_student_id = #{courses_student_id}
    </select>

    <insert id="insertEduCoursesStudent" parameterType="EduCoursesStudent" useGeneratedKeys="true" keyProperty="id">
        insert into edu_courses_student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="coursesId != null">courses_id,</if>
            <if test="courseName != null">course_name,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="coursesId != null">#{coursesId},</if>
            <if test="courseName != null">#{courseName},</if>
         </trim>
    </insert>

    <update id="updateEduCoursesStudent" parameterType="EduCoursesStudent">
        update edu_courses_student
        <trim prefix="SET" suffixOverrides=",">
            <if test="coursesId != null">courses_id = #{coursesId},</if>
            <if test="courseName != null">course_name = #{courseName},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteEduCoursesStudentById" parameterType="Long">
        delete from edu_courses_student where id = #{id}
    </delete>

    <delete id="deleteEduCoursesStudentByIds" parameterType="String">
        delete from edu_courses_student where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
    <delete id="deleteEduCoursesStudentDetailsByCoursesStudentIds" parameterType="String">
        delete from edu_courses_student_details where courses_student_id in 
        <foreach item="coursesStudentId" collection="array" open="(" separator="," close=")">
            #{coursesStudentId}
        </foreach>
    </delete>

    <delete id="deleteEduCoursesStudentDetailsByCoursesStudentId" parameterType="Long">
        delete from edu_courses_student_details where courses_student_id = #{coursesStudentId}
    </delete>

    <insert id="batchEduCoursesStudentDetails">
        insert into edu_courses_student_details( id, courses_student_id, student_id, student_name, student_phone_number, student_sex, student_status) values
        <foreach item="item" index="index" collection="list" separator=",">
            ( #{item.id}, #{item.coursesStudentId}, #{item.studentId}, #{item.studentName}, #{item.studentPhoneNumber}, #{item.studentSex}, #{item.studentStatus})
        </foreach>
    </insert>
</mapper>